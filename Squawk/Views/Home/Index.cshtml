
<P>
    <br/>
    <input type="button" id="sendmessage" value="Refresh" />
</p>

<div class="row">
    <h2>System Monitoring</h2>
    <div class="col-md-12" id="chartcanvascontainer">
        <hr />
    </div>
</div>

@section scripts {

    <script src="~/Scripts/Chart.js"></script>
    <script src="~/Scripts/Chart.Scatter.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.0.js"></script>
    <script src="~/signalr/hubs"></script>

    <script>

        $(function () { 

            var chartCount = 0;

            var chat = $.connection.chatHub;
      
            chat.client.asyncChartDataReceiver = function (chartdata) {

                var cpuData = [];
                var diskData = [];
                var networkData = [];
                var memoryData = [];

                for (var key in chartdata)
                {
                    if (chartdata.hasOwnProperty(key))
                    {
                        switch(chartdata[key].SampleTypeId)
                        {
                            case 1:
                                cpuData.push({
                                    x: Date.parse(chartdata[key].dtSample) + 24 * 3600000,
                                    y: chartdata[key].dbValue
                                });
                                break;

                            case 2:
                                diskData.push({
                                    x: Date.parse(chartdata[key].dtSample) + 24 * 3600000,
                                    y: chartdata[key].dbValue
                                });
                                break;

                            case 3:
                                networkData.push({
                                    x: Date.parse(chartdata[key].dtSample) + 24 * 3600000,
                                    y: chartdata[key].dbValue
                                });
                                break;

                            case 4:
                                memoryData.push({
                                    x: Date.parse(chartdata[key].dtSample) + 24 * 3600000,
                                    y: chartdata[key].dbValue
                                });
                                break;


                        }
                    }
                }

                var chartData = {
                    datasets: [
                        { label: 'cpu usage', strokeColor: "darkgray",    data: cpuData },
                        { label: 'disk usage', strokeColor: "black",      data: diskData },
                        { label: 'network usage',  strokeColor: "#008AE6",    data: networkData },
                        { label: 'memory usage', strokeColor: "green",       data: memoryData }
                    ]
                };

                var chartWidth = "1000"
                var chartHeight = "180"

                var $hostname = chartdata[0].Host.Name;

                var $canvasid = "canvas-" + chartCount;
                var $canvas = $("<canvas>", { id: $canvasid, width: chartWidth, height: chartHeight });
                $canvas.css('margin-bottom', 20);

                $("#chartcanvascontainer").append($("<p>", { text: $hostname }));
                $("#chartcanvascontainer").append($canvas);

                var ctx = document.getElementById($canvasid).getContext("2d");

                var myLineChart = new Chart(ctx).Scatter(chartData,
                    {
                        showScale: true,
                        scaleShowLabels: true,
                        scaleShowHorizontalLines: true,
                        scaleShowVerticalLines: true,
                        scaleLineWidth: 0.5,
                        scaleLineColor: "darkgray",
                        scaleGridLineColor: "lightblue",
                        scaleLabel: "<%=value%>%",
                        scaleDateFormat: "ddd/dd",
                        scaleTimeFormat: "",
                        scaleDateTimeFormat: "",
                        scaleGridLineWidth: 0.5,
                        useUtc: true,
                        pointDot: false,
                        scaleType: 'date',
                        animation: false,

                        scaleOverride: true,
                        scaleSteps: 4,
                        scaleStepWidth: 25,
                        scaleStartValue: 0,

                        legendTemplate : '<P>'
                                            +'<% for (var i=0; i<datasets.length; i++) { %>'
                                              +'<span style=\"color:<%=datasets[i].strokeColor%>\">'
                                              +'<% if (datasets[i].label) { %><%= datasets[i].label %><% } %>'
                                            + '</span>&nbsp;&nbsp;&nbsp;'
                                          +'<% } %>'
                                        +'</P>'
                    });

                var legend = myLineChart.generateLegend();

                $("#chartcanvascontainer").append(legend);

                chartCount++;
            };

            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    chartCount = 0;
                    $("#chartcanvascontainer").empty();
                    chat.server.trigger();
                });

                $(document).ready(function () {
                        chat.server.trigger();
                });

            });
        });
  
     
    </script>
}


